import 'package:dartz/dartz.dart';

import '../../../core/error/failures.dart';
import '../../../core/usecases/usecase.dart';
import '../../data/models/task/task_model.dart';
import '../entities/task/tasks_stream.dart';

abstract class TaskRepository {
  ///Gets stream of tasks in selected locations.
  ///
  ///Returns [TasksStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, TasksStream>> getTasksStream(
    ItemsInLocationsParams params,
  );

  ///Gets task by id.
  ///
  ///Returns [TaskModel] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, TaskModel>> getTaskById(
    IdParams params,
  );

  ///Gets tasks for asset.
  ///
  ///Returns [TasksStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, TasksStream>> getTasksForAsset(
    IdParams params,
  );

  ///Gets archive tasks for asset.
  ///
  ///Returns [TasksStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, TasksStream>> getArchiveTasksForAsset(
    IdParams params,
  );

  ///Gets stream of tasks from archive in selected locations.
  ///
  ///Returns [TasksStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, TasksStream>> getArchiveTasksStream(
    ItemsInLocationsParams params,
  );

  ///Gets stream of latest five tasks from archive in selected locations.
  ///
  ///Returns [TasksStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, TasksStream>> getArchiveLatestTasksStream(
    ItemsInLocationsParams params,
  );

  ///Adds new task to the DB.
  ///
  ///Returns [String] containing generated by DB item id.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, String>> addTask(TaskParams params);

  ///Updates task in the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> updateTask(TaskParams params);

  ///Deletes task from the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> deleteTask(TaskParams params);

  ///Cancel task and move it to tasks archive.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> cancelTask(TaskParams params);

  ///Complete task and move it to tasks archive.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> completeTask(TaskParams params);
}
